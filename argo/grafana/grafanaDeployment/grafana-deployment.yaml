apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ui
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  # Use the host you used in your kubernetes Ingress Configurations
  - host: grafana.example.com
    http:
      paths:
      - backend:
          service:
            name: grafana
            port:
              number: 3000
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - grafana.apps
    secretName: prometheus-secret
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: monitoring
data:
# USe base64 in the certs
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFVENDQWZrQ0ZHcS9paVNNMHRWZ1JkOWZsM1hHOHRjNU9Mdm9NQTBHQ1NxR1NJYjNEUUVCQ3dVQU1FVXgKQ3pBSkJnTlZCQVlUQWtGVk1STXdFUVlEVlFRSURBcFRiMjFsTFZOMFlYUmxNU0V3SHdZRFZRUUtEQmhKYm5SbApjbTVsZENCWGFXUm5hWFJ6SUZCMGVTQk1kR1F3SGhjTk1qVXdNVEUxTVRjeU1qUXlXaGNOTXpVd01URXpNVGN5Ck1qUXlXakJGTVFzd0NRWURWUVFHRXdKQlZURVRNQkVHQTFVRUNBd0tVMjl0WlMxVGRHRjBaVEVoTUI4R0ExVUUKQ2d3WVNXNTBaWEp1WlhRZ1YybGtaMmwwY3lCUWRIa2dUSFJrTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBUThBTUlJQkNnS0NBUUVBcldFWFdYM0ZzUk9CZmxKODEwQUthZnA3YVNaRlJ2K0xEakhVTnl1dWJuN0dsL1FWCmVQZGNITWtYQ2d2NjVFZmlQTmRYVVpmeHdlTHFXUmJ4enZNOXRLZ0FLWGQxbEk0d1ZFbk4wZFJmdjdzSkVqeE0KS0haQTFtRTlhTXZtOWRQTmhqMFZNNndXWnVkVnZuTTRXcisvNHZtMisyU0kyb1Y5M0NFUzQ1NzdmSmRJMXZqcQpjZlZ4dkRpaE5jWGl5Y21yS2JURWhWZzRsdlE0S1pySzRNU0FYTmZ0WTlYTkFHZ2dvZysycmdUbHhrTThjdlNyCnVBKytmTVBTSDlOQzhPUDJ6QWFSS3VhcmZTZlBaM1ZVbnNER0x5cUFsNGxab0JOa21wRFVBVDhXVjR2S212SGEKZjhrWTlMc3ZUb0w5YkVvZlNBTzl1Y29kREZRVGV6Nnk3dUpnSFFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFBRDVEYUFDbGd1OTRvZWhrSTlkZ0VhOGc1UGI2d3hXbnBudmtmNEVmVjI2Y1ZqMkV4RlVkejBmTC9HCngrc01OK3laQTFaYnp5SlhZOXVneE4wc2pHRFNrNUdYZFpGb3kyVjlYTGpqZ1EvWDhMdk5MMjlmT1RlY1AwM1AKRVBsU3phT2VBbnZQbCtrNjZodno1bzNFQnd4QUJ3eUVLRDZjY2Q0V0ZFOWFrdTB2cSt5bzl4a0doTitUODRXSAo4cXRHT2RMVHFJeFlDYXVBWlBkYXJObTRDdk0zb3IvYVZpbUFWeFBUckZxbDJwOHhVWUZUUGM3K1BvOUhKTVhZCjg1eSt2ZjZuaW12cXBYK0hEaXJrcFQzaWluK29xS25OaFptZmlSOXh3cGJOblhtalNpTFIzQ1VYaW9TSno5YmUKa3haNEZNY0dhd1dlL09sWEZBM1JZTGNHZk1ZLwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3RZUmRaZmNXeEU0RisKVW56WFFBcHArbnRwSmtWRy80c09NZFEzSzY1dWZzYVg5QlY0OTF3Y3lSY0tDL3JrUitJODExZFJsL0hCNHVwWgpGdkhPOHoyMHFBQXBkM1dVampCVVNjM1IxRisvdXdrU1BFd29ka0RXWVQxb3krYjEwODJHUFJVenJCWm01MVcrCmN6aGF2Ny9pK2JiN1pJamFoWDNjSVJMam52dDhsMGpXK09weDlYRzhPS0UxeGVMSnlhc3B0TVNGV0RpVzlEZ3AKbXNyZ3hJQmMxKzFqMWMwQWFDQ2lEN2F1Qk9YR1F6eHk5S3U0RDc1OHc5SWYwMEx3NC9iTUJwRXE1cXQ5Sjg5bgpkVlNld01ZdktvQ1hpVm1nRTJTYWtOUUJQeFpYaThxYThkcC95UmowdXk5T2d2MXNTaDlJQTcyNXloME1WQk43ClByTHU0bUFkQWdNQkFBRUNnZ0VBQVAyaGl3YmZkdFFVTk5zVzBJb1NwU2xqeENXT1Zzb0dDdVk0L3JtMnJQWDMKZjQzTEE1NXlQYzNlWGxYVU1MTENkYk9MVWJHTEZaOE0xTVovU2ozMGw5QXY5QXkxTk15ZE5SWVk0WDZUcjM1TApubm1PdTlwMUkyUjUyOXZ5Yld3dzYvZjBZNCt6cnhIYVdSVENlUzVJVSswMllQaGhtZElTZG93UDFoSW1BTC9BCkpGVlNwMVlzN2FUQnBzbmEvRzBwR2NNOFYyTm9ucEtsMStzcVFxR24rSTBUNlljMVJ3MjlVb0c1dkxxK2R3eUQKWVV6VTB2WWlaMVIvSEpxUlZoNHFrSmZjM0laaTdPUElIWjMxZTF5eUo3WWl6TTlTeGlFN3RYenkwd3pteUR1egpXSVpvUnhGcmVXSGdNNWxPb2I2YytWZG5XdzZSeWxGVmlUT0pydU1TRndLQmdRRHFvRHFrcnZmMUdoWHFsYVhrCjhlaXhXL2VYanQrdGUxQy9Ua0ZiZ0hNMXVyNHRield4Sk53UXFFeU5KdmxrbUFwOWYyK0tVUkxFRHJ2TnlTZDUKd2Q3bzQxcnZ5WTRtNzdNZjQvTEgrMWZoUlZDRGxCWFhGL1dYcHNFYjkwTFFYdzZMU0ljNjhORkEwV3FkdWI3Zgp2ZDlXQmltS0VoRkJheFRBRnQ3am9sWUgrd0tCZ1FDOUxJTitZNzl4SXQwZzVDTGhTRG9xREdYeXhodVNURlRxCitBM0hBMmgybFJST2FNQmVxMWZhZlBvR0F5Q1FCT0ZMNVZ5MjU5NytOcnJQK2V4c3hoYXoxMG5vNUJUZ3BaVFAKWG91MXhuNFN4c3BDRjRoTlBxQjVaNUg3dHNhNkZqeVlYK28rMlZmYnNPci8vdzUzNE5XZDRZMHFIS3BEOCtBUgpENDlsdk5MRXh3S0JnUUMrTW91M2lwczVWeDhqSHBMd0NHYXd1RFA2NlhoTHd1YVBYcG0rMmw4SzFFcHN2SFZUCkYrVkpuNVVHNit4SjdySzZUMzhWS21uREE0cWM1SThhdGQzRS91RnQ5djlFY3hYTEtWZGJaRlkyS0tGL09LR0gKejBWbzNXWTRESFplUW1DZzZuZXRnU0N3b2RNQzcxdGJOeW1BSzlpcXM4REhQazRBOWNsVDBQcGExd0tCZ0hhZQpZTjF4b210SWx5dTJvWUJ0ajdzcUJ3c1IyZHdFYlFMaEE1S1V1bjRRd0tqaDJpNENkcFlUNDVxOWZ6K1BMODR0ClJkT1MxU3JHR3FHcWJ1dE4wcEoySG13Z0NFOU14R0M3UWhON0lUYVkyOTVSYnpBd1l1TjlZL1pZQjRoTHhUY3UKZlcxblQwWDhTMzYxNmRhVmJwME8venMydWpUZHlOUXAwNXJScWIrbEFvR0FaZXR3MnJ2L2EvWE04UTVXQ2FEUwo5ZEpyYTVDY0ZGUlExUjBBelRWa1NwQkE4dzZCMFFwOHJPRlUzYzUyR04vYmdMN2xWYUozdlNDVkdqczBHRjcrCnI1NXgzYWcyUGlRMkFwNWwxVHJyaVhTTjZWaVRsL0lGR3UxeWJqZUs2TEkySk9wZHBGSGkwZnBsMEpaV2ZZNjUKUS9iWlBJaGx4RHVici9yRXFMRUhIS3c9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: iailyas/my-grafana:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
      name: http-grafana
  selector:
    app: grafana
  sessionAffinity: None
  type: LoadBalancer



  #   kubectl create configmap grafana-plugins --from-file=/path/to/your/directory --namespace=my-grafana
#  kubectl create namespace my-grafana
